#!/usr/bin/python3
import base64       # Import base64 module for encoding
import os           # Import os module for file operations
import json         # Import json module for JSON handling
import subprocess   # Import subprocess module to run commands
import yaml         # Import yaml module for YAML handling

# Class for defining text colors
class color:
    GREEN = '\033[92m'
    RED = '\033[91m'
    BOLD = '\033[1m'
    END = '\033[0m'

data = {}  # Initialize an empty dictionary to store variable data

# Function to process input variable from CLI in the format Variable=Value
def processInputVariable(value):
    try:
        value = str(value)             # Convert input value to string
        if '=' not in value:          # Check if '=' exists in the value
            return None               # Return None if '=' is not found
        values = value.split("=")     # Split value into Variable and Value
        if len(values) != 2:          # Check if there are exactly two parts
            return None               # Return None if not exactly two parts
    except:
        print("Please input a valid string in this format: Variable=Value")
        return None
    return values                    # Return the list containing Variable and Value

# Function to input environment variable data from command line
def envCLIData():
    print("To stop inputting your environment variables, input stop.")

    while True:
        input_variable_data = input("Input your Variable and its value in this format: Variable=Value: ")
        if input_variable_data.lower() == 'stop':
            break
        if processInputVariable(input_variable_data) == None:
            print(color.RED + "Invalid Input!" + color.END)
            continue
        else:
            variableData = processInputVariable(input_variable_data)
            # Encode value to base64 and store in dictionary
            value_in_base64 = base64.b64encode(bytes(variableData[1], 'utf-8')).decode('utf-8')
            data[variableData[0]] = value_in_base64

    return data

# Function to input environment variable data from a file
def envFileData():
    file_path = input("Input your file path: ")

    with open(file_path, 'r') as file:
        file_content = file.read().splitlines()  # Read file content line by line
        for line in file_content:
            variableData = processInputVariable(line)
            if variableData == None:
                pass
            else:
                # Encode value to base64 and store in dictionary
                value_in_base64 = base64.b64encode(bytes(variableData[1], 'utf-8')).decode('utf-8')
                data[variableData[0]] = value_in_base64

    return data

# Input for secret name, namespace, and data input type (CLI or file)
print(color.GREEN + color.BOLD + "Kubernetes Sealed Secret Generator\n\n" + color.END)
secret_name = input("Input Name of Secret: ")
namespace = input("Input Namespace for the Secret: ")
data_input_type = input("How do you wish you to input your environment variable, CLI or .env file(Input cli or file.): ")

data = {}  # Initialize an empty dictionary to store variable data

if data_input_type.lower() == "cli":
    data = envCLIData()  # Call function to input data from command line
elif data_input_type.lower() == "file":
    data = envFileData()  # Call function to input data from file
else:
    pass  # Do nothing if input type is neither CLI nor file

# Define Kubernetes secret object
k8s_secret = {
    "apiVersion": "v1",
    "kind": "Secret",
    "metadata": {
        "name": str(secret_name),
        "namespace": str(namespace)
    },
    "data": data  # Add encoded data to the secret
}

# Get directory path of the current script
current_dir = os.path.dirname(os.path.abspath(__file__))
# Construct absolute path for secret file
secret_file_path = os.path.join(current_dir, 'mysecret.json')

# Write Kubernetes secret to a JSON file
with open(secret_file_path, 'w') as file:
    json.dump(k8s_secret, file)  # Dump secret object to JSON file

# Function to convert sealed secret JSON to YAML format
def sealedSecretConverter(file):
    # Execute kubeseal command and capture the output
    secret = subprocess.run(['kubeseal', '-o', 'json', '-f', file], capture_output=True, text=True)
    
    # Define output file path for the YAML file
    secret_file_path = os.path.join(current_dir, 'sealedsecret.yaml')
    
    # Write sealed secret JSON output to a YAML file
    with open(secret_file_path, 'w') as file:
        # Convert JSON output to Python dictionary
        secret_json_format = json.loads(secret.stdout)
        # Convert Python dictionary to YAML format
        secret_yaml_file = yaml.dump(secret_json_format)
        # Write YAML formatted sealed secret to file
        file.write(secret_yaml_file)

    print(color.BOLD +  color.GREEN +"Secret Generation was Successful!" + color.END)

# Call function to convert get sealed secret.
sealedSecretConverter(secret_file_path)
